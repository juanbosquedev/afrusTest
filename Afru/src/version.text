import { useState, useEffect } from "react";
import "./App.css";
import getInfo from "./getInfo.js";
import SearchBar from "./SearchBar";

function App() {
  //validaación de formulario, filtado, animaciones, paginado, favoritos
  const [originalPrice, setOriginalPrice] = useState("");
  const [discountPercentage, setDiscountPercentage] = useState("");
  const [finalPrice, setFinalPrice] = useState(null);

  const calcularDescuento = () => {
    const price = parseFloat(originalPrice);
    const percentage = parseFloat(discountPercentage);

    if (!isNaN(price) && !isNaN(percentage)) {
      const discountAmount = (price * percentage) / 100;
      const finalPrice = price - discountAmount;
      setFinalPrice(finalPrice.toFixed(2));
    } else {
      setFinalPrice(null);
    }
  };

  const [books, setBooks] = useState([]);
  const [cart, setCart] = useState([]);
  const [totalItems, setTotalItems] = useState(0);

  useEffect(() => {
    // Función para obtener la lista de libros de la API de Google Books
    const fetchBooks = async () => {
      try {
        const response = await fetch(
          "https://www.googleapis.com/books/v1/volumes?q=javascript"
        );
        const data = await response.json();
        if (data.items) {
          //función para tomar solamente las propiedades que queremos
          const filterInfo = data.items.map((el) => getInfo(el));
          return setBooks(filterInfo);
        }
      } catch (error) {
        alert("Error al obtener libros", error);
      }
    };

    fetchBooks();
  }, []); //carga solamente una vez al iniciar la página

  const addToCart = (book) => {
    const updatedCart = [...cart, book];
    setCart(updatedCart);
    setTotalItems(updatedCart.length);
  };

  return (
    <>
      <body>
        <header>
          <h1>Bienvenido a Mi Tienda de Libros</h1>
        </header>
        <nav>
          <div>
            <a href="#">Inicio</a>
            <a href="#">Catálogo</a>
            <a href="#">Contacto</a>
          </div>

          <SearchBar />
        </nav>
        <div className="App">
          <div className="container">
            {books &&
              books.map((book) => (
                <div key={book.id} className="book">
                  <img src={book.img} alt={book.title} />
                  <h2>{book.title}</h2>
                  <p>{book.subtitle}</p>
                  <button onClick={() => addToCart(book)}>
                    Agregar al carrito
                  </button>
                </div>
              ))}
          </div>
          <div className="container">
            <div className="calculator">
              <h1>Calculadora de Descuentos</h1>
              <div className="input-group">
                <label htmlFor="originalPrice">Precio Original:</label>
                <input
                  type="number"
                  id="originalPrice"
                  value={originalPrice}
                  onChange={(e) => setOriginalPrice(e.target.value)}
                  required
                />
              </div>
              <div className="input-group">
                <label htmlFor="discountPercentage">
                  Porcentaje de Descuento:
                </label>
                <input
                  type="number"
                  id="discountPercentage"
                  value={discountPercentage}
                  onChange={(e) => setDiscountPercentage(e.target.value)}
                  required
                />
              </div>
              <button onClick={calcularDescuento}>Calcular Descuento</button>
              {finalPrice !== null && (
                <div id="result">Precio Final con Descuento: ${finalPrice}</div>
              )}
            </div>
          </div>

          <div className="cart">
            <h2>Carrito de Compras</h2>
            <p>Cantidad de Libros en el Carrito: {totalItems}</p>
            <ul>
              {cart.map((book) => (
                <li key={book.id}>{book.volumeInfo.title}</li>
              ))}
            </ul>
          </div>
        </div>
      </body>
    </>
  );
}

export default App;
