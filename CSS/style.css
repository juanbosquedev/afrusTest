.flexwrap {
  display: flex;
  /* place-items: center; */
  justify-content: center;
  flex-wrap: wrap;
}
.wrapbox {
  background-color: #008000;
  justify-content: center;
  margin: 10px;
  min-width: 23px !important;
  width: calc(80% / 9);
  height: 54px;
}

.flexgrid {
  display: grid;
  justify-content: center;
  grid-gap: 10px;
  /* grid-template-columns: repeat(3, 25%); */
  grid-template-columns: auto auto auto;
  grid-template-rows: auto auto auto;

  /* grid-auto-flow: dense; */
  /* grid-auto-flow: row; */
  /* grid-auto-flow: column; */
}
.gridbox {
  background-color: #1b0fcc;
  color: rgb(116, 106, 106);
  padding: 3px;

  justify-items: center;
  align-content: center;
  margin: 10px;
  /* min-width: 23px !important; */
  /* width: calc(80%/9); */
  /* height: 20px; */
}
.grid {
  display: grid;
  background-color: aqua;
  grid-template-columns: repeat(
    4,
    1fr
  ); /* puedes poner 200px 200px 200px 200px lo cual es una medida fija, o sino algo flexible como 
    1fr 1fr 1fr 1fr; para evitar esta repetición existe repeat(cantidad de veces a repetir, y tamaño ej: repeat(4, 1fr) 
    cuándo tenemos 4 columnas vamos a tener 5 lineas por q tenemos una linea por dealnte de cada columna y en la última columan tenemos una linea 
    en la parte del último*/

  grid-template-rows: minmax(
    100px,
    auto
  ); /* le indicamos un valor minimo de alto que deben tener las filas, dejando el máximo en automático */
  /* grid-template-columns: 50% 50%; con este especifico el ancho de las columnas, por lo que agregar una nueva se irá para abajo
    creando u ocupando una nueva fila, por que los elementos en grid corren de izq a der y de arriba a abajo*/
  /*grid-template-rows: auto 200px 400px;  indicamos el alto de cada fila, con auto se ajusta al elemento que contiene, es decir si es un texto y justo es más largo se ajusta
    al tamaño del texto agrandandosé o achicandosé según el caso*/
  /* gap:1rem;
   /* column-gap: 1rem; aplica espacio solamente entre columnas */
  /* justify-items: ; para justificar cada elemento contenido en las columnas grid, start/center/end (se limita como elemento en linea, al ancho de su texto; al inicio, centro o fin
    o stretch(ocupa el ancho de su espacio asignado)
    aling-items: funciona de manera similar a justify nada más que aplicado a las filas con start se irá hacia arriba/center/end etc*/
  /* row-gap: 1rem; aplica espacio solamente entre filas  */
  /* grid-auto-rows: 50px; controla la altura de filas no especificadas, asignandole una altura 
   grid-template-rows: 100px, 200px; le asignará a las dos primeras filas estas alturas, mientras que para las restantes que se vallan creando se aplicara grid-auto-row*/
}
/* div*6{$} div*6 da 6 divs; {para escribir texto adentro de cada div}; $número incremental, que se irá incrementando*/
/* grid es como una rejilla invisible en el layout, se aplica a todos los elementos */
.grid > div {
  /* > hace que se aplique a los elementos que estan adentro del selector evitando sobreescribir otros que eestén por fuera */

  background: rgb(26, 168, 61);
  padding: 1rem;
}
.header {
  grid-column: 1/5; /* si queremos que este elemento tenga un ancho de más columna que los otros hay que indicar la cantidad de lineas que querémos que abarcque;
si el grid del padre tiene 4 columnas, va a tener 5 lineas; le indicamos que tenga abarque las lineas de la 1 a la 5(ocupa el 100% del ancho */

  /*
     align-self: ; lo que aplique de alineado o con justify-self se aplica solamente el elemento seleccionado, funciona dentro del elemento en particular
    mientras que el anterior justify/aling-items funciona en el contendor del item*/
}
.footer {
  grid-column: 1/5;
}
.side {
  grid-column: 1/3;
} /*  agarra dos columnas*/

.content {
  grid-column: 3/5;
} /*  agarra 3 columnas*/
.grid div:hover {
  outline: 1px solid #f1c40f;
}
